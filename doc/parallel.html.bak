<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <meta http-equiv="content-type" content="application/xhtml+xml; charset=UTF-8" />
    <meta content="HTML Tidy for Windows (vers 1st November 2003), see www.w3.org"
      name="generator" />
    <title>Boost C++ Libraries</title>
    <link type="image/ico" href="http://www.boost.org/favicon.ico" rel="icon" />
    <link href="http://www.boost.org/style-v2/section-welcome.css" type="text/css"
      rel="stylesheet" />
    <link rel="stylesheet" type="text/css" href="files/code.css" />
    <!--[if IE 7]> <style type="text/css"> body { behavior: url(http://www.boost.org/style-v2/csshover3.htc); } </style> <![endif]-->
    <meta content="mpr2HgFpodnbF_8fv4qXd9roIClVwtX3C-Kd3F6r61w" name="google-site-verification" />
  </head>
  <!-- Note: Editing website content is documented at:http://www.boost.org/development/website_updating.html-->
  <!--***************************************************************************************** -->
  <!--                                        B O D Y                                           -->
  <!--***************************************************************************************** -->
  <body>
    <div id="heading">
      <div class="heading-inner">
        <h1 class="heading-title"> <a href="http://www.boost.org/"> <img class="heading-logo"
              alt="Boost C++ Libraries" src="http://www.boost.org//gfx/space.png" />
            <span class="heading-boost">Boost</span> <span class="heading-cpplibraries">C++
              Libraries</span>  </a></h1>
        <p class="heading-quote"> <q>...one of the most highly regarded and
            expertly designed C++ library projects in the world.</q> <span class="heading-attribution">—
            <a class="external" href="http://www.gotw.ca/">Herb Sutter</a> and <a
              class="external" href="http://en.wikipedia.org/wiki/Andrei_Alexandrescu">Andrei
              Alexandrescu</a>, <a class="external" href="http://safari.awprofessional.com/?XmlId=0321113586">C++
              Coding Standards</a></span></p>
      </div>
    </div>
    <div class="cuerpo_central"> <br />
      <div class="cuerpo_texto"> <br />
        <span style="font-size: 32pt;"><span style="font-weight: bold; color: black;"><a
              href="index.html">The Boost Sort  Library</a> </span></span><br />
        <h3 style="font-style: italic;" class="author"><span class="firstname">Francisco
            Jose Tapia</span>   Copyright © 2017 Steven Ross, Francisco Jose
          Tapia, Orson Peters</h3>
        <div>
          <div class="legalnotice">
            <p><span style="font-style: italic;">Distributed under the Boost
                Software License, Version 1.0. (See accompanying file
                LICENSE_1_0.txt or copy at </span><a style="font-style: italic;"
                href="file:///LICENSE_1_0.txt" target="_top">
                http://www.boost.org/LICENSE_1_0.txt </a><span style="font-style: italic;">)</span>
            </p>
          </div>
        </div>
        <br />
        THIS IS NOT THE OFFICIAL DOCUMENTATION OF THE PROJECT. IT IS UNDER
        CONSTRUCTION.  <br />
        THIS IS ONLY A BRIEF DOCUMENTATION TO ORIENTATE IF YOU WANT TO USE THE
        LIBRARY OR RUN THE BENCHMARKS<br />
        <br />
        <br />
        <div class="caja_menu"> <span style="font-size: 16pt;font-weight: bold; color: black;"><br />
            Table of Contents</span> <br />
          <div style="margin-left: 80px;"><br />
            <a href="parallel.html#par_algo">4.- Parallel algorithms</a><br />
            <div style="margin-left: 40px;"><a href="parallel.html#introduction">4.1.-
                Introduction</a></div>
            <div style="margin-left: 80px;"><a href="parallel.html#current">4.1.1.-
                Current perspective</a><br />
              <a href="parallel.html#new_par">4.1.2.- New parallel sort
                algorithm</a></div>
            <br />
            <div style="margin-left: 40px;"><a href="parallel.html#thread">4.2.-
                Thread specification in the parallel algorithms</a></div>
            <br />
            <div style="margin-left: 40px;"><a href="parallel.html#algorithms">4.3.-
                Parallel Algorithms</a></div>
            <div style="margin-left: 80px;"><a href="parallel.html#block">4.3.1.-
                block_indirect_sort</a><br />
              <a href="parallel.html#sample">4.3.2.- sample_sort</a><br />
              <a href="parallel.html#stable">4.3.3.- parallel_stable_sort</a></div>
            <br />
            <a href="parallel.html#par_benchmarks">5.- Parallel Benchmarks</a><br />
            <div style="margin-left: 40px;"><a href="parallel.html#par_gcc">5.1.-
                Linux x64 GCC 6.3</a></div>
          </div>
          <br />
          <a href="benchmark.html#gratitude"> </a>
          <div style="margin-left: 40px;"> </div>
        </div>
        <br />
        <p><a name="par_algo"></a> <span style="font-size: 24pt;font-weight: bold; color: black;">4.-
            PARALLEL ALGORITHMS</span></p>
        <p> </p>
        <p><a name="introduction"></a> <span style="font-size: 18pt;font-weight: bold; color: black;">4.1.-
            INTRODUCTION </span></p>
        <p style="margin-left: 80px;"><br />
        </p>
        <p style="margin-left: 80px;">These algorithms<span style="font-weight: bold;">
            do not use any other library</span> or utility. Compiling this
          library requires a <span tyle="font-weight: bold;"> C++11 compliant
            compiler.</span><br />
          <br />
          The algorithms <span style="font-weight: bold;">use a comparison
            object</span>, in the same way as the standard library sort
          algorithms. If you don't define it, the comparison object defaults to
          std::less, which uses the &lt; operator internally for comparisons.<br />
          <br />
          The algorithms are <span style="font-weight: bold;">exception safe</span>,
          meaning that,  the exceptions generated by the algorithms guarantee
          the integrity of the objects to sort, but not their relative order. If
          the exception is generated inside the objects (in the move or in the
          copy constructor.. ) the results can be unpredictable.</p>
        <p style="margin-left: 80px;"><br />
        </p>
        <p style="margin-left: 80px;"> This table provides you a brief
          description of the sort algorithms in the library. </p>
        <p style="margin-left: 80px;"><br />
        </p>
        <table cellspacing="0" border="1" style="width: 841px; height: 209px; margin-left: 80px;">
          <tbody>
            <tr>
              <td><span style="font-weight: bold;">Algorithm</span></td>
              <td style="width: 77.7px;"><span style="font-weight: bold;"> Stable
                  </span></td>
              <td style="height: 60px; width: 228.317px;"><span style="font-weight: bold;"> Additional
                  memory </span></td>
              <td><span style="font-weight: bold;"> Best, average, and worst
                  case </span></td>
            </tr>
            <tr>
              <td>parallel_sort</td>
              <td>NO</td>
              <td>block_size * num_threads</td>
              <td>  N Log N, N Log N , N Log N</td>
            </tr>
            <tr>
              <td>parallel_stable_sort</td>
              <td>YES</td>
              <td>N / 2</td>
              <td>  N Log N, N Log N , N Log N</td>
            </tr>
            <tr>
              <td>sample_sort</td>
              <td>YES</td>
              <td>N</td>
              <td>  N Log N, N Log N , N Log N</td>
            </tr>
          </tbody>
        </table>
        <div style="margin-left: 80px;"> <br />
          The block_size is an internal parameter of the algorithm, which  in
          order to achieve the highest speed, change according the size of the
          objects to sort according the next table. The strings use a block_size
          of 128.<br />
        </div>
        <table cellspacing="0" border="1" style="width: 803px; height: 84px; margin-left: 80px;">
          <tbody>
            <tr>
              <td style="width: 104.95px;">object size (bytes)</td>
              <td style="width: 62px; background-color: white; text-align: center;">1
                - 15<br />
              </td>
              <td style="width: 62px; background-color: white; text-align: center;">16
                - 31<br />
              </td>
              <td style="width: 62px; background-color: white; text-align: center;">32
                - 63<br />
              </td>
              <td style="width: 62px; background-color: white; text-align: center;">64
                - 127<br />
              </td>
              <td style="width: 62px; background-color: white; text-align: center;">128
                - 255<br />
              </td>
              <td style="width: 62px; background-color: white; text-align: center;">256
                - 511<br />
              </td>
              <td style="width: 62px; background-color: white; text-align: left;">512
                - <br />
              </td>
            </tr>
            <tr>
              <td>block_size <br />
              </td>
              <td style="width: 62px; background-color: white; text-align: center;">4096<br />
              </td>
              <td style="width: 62px; background-color: white; text-align: center;">2048<br />
              </td>
              <td style="width: 62px; background-color: white; text-align: center;">1024<br />
              </td>
              <td style="width: 62px; background-color: white; text-align: center;">768<br />
              </td>
              <td style="width: 62px; background-color: white; text-align: center;">512<br />
              </td>
              <td style="width: 62px; background-color: white; text-align: center;">256<br />
              </td>
              <td style="width: 62px; background-color: white; text-align: center;">128<br />
              </td>
            </tr>
          </tbody>
        </table>
        <br />
        <br />
        <p><a name="current"></a> <span style="font-size: 18pt;font-weight: bold; color: black;">4.1.1.-
            Current Perspective </span></p>
        <div style="margin-left: 80px;"> <br />
          There are two primary categories of parallelization in sorting
          algorithms.<br />
          <br />
          <span style="font-weight: bold; text-decoration: underline;">SUBDIVISION
            ALGORITHMS</span><br />
          <br />
          Filter the data and generate two or more parts. Each part obtained is
          filtered and divided by other threads, until the size of the data to
          sort is smaller than a predefined size, then it is sorted by a single
          thread. The algorithm most frequently used in the filter and sorting
          is quick sort.<br />
          <br />
          These algorithms are <span style="font-weight: bold;"> fast with a
            small number of threads</span>, but are inefficient with a great
          number of HW (hardware) threads. Examples of this category are </div>
        <div style="margin-left: 40px;">
          <div style="margin-left: 80px;"> - Intel Threading Building Blocks
            (TBB) <br />
             - Microsoft PPL Parallel Sort.</div>
          <div style="margin-left: 120px;"><br />
          </div>
          <div style="margin-left: 40px;"> <span style="font-weight: bold; text-decoration: underline;">MERGING
              ALGORITHMS</span><br />
            <br />
            Divide the data in parts, and each part is sorted by a thread. When
            the parts are sorted, they are merged to obtain the final results.
            The problem of these algorithms is they need additional memory for
            the merge, usually the same size as the data.<br />
            <br />
            With a small number of threads, these algorithms have similar speed
            to than the subdivision algorithms, but with <span style="font-weight: bold;">many
              threads they are  much faster</span> . Examples of this category
            are : </div>
          <div style="margin-left: 80px;">  - GCC Parallel Sort (based on
            OpenMP)<br />
             - Microsoft PPL Parallel Buffered Sort</div>
        </div>
        <br />
        <div style="margin-left: 80px;">This generates an <span style="font-weight: bold;">undesirable
            duality</span>. With a small number of threads the optimal algorithm
          is not the optimal for a big number of threads. For this reason, the
          SW designed for a small machine is inadequate for a big machine and
          vice versa. But the main problem for the merging algorithms is the
          additional memory used, usually of the same size as the data.</div>
        <br />
        <p><a name="new_par"></a> <span style="font-size: 18pt;font-weight: bold; color: black;">4.1.2.-
            New Parallel Sort Algorithm </span></p>
        <br />
        <div style="margin-left: 80px;"> This version have as a <span style="font-weight: bold;">new
            parallel sort algorithm named block_indirect_sort</span> <span style="font-style: italic;"></span>,
          created for processors connected with<span style="font-weight: bold;">
            shared memory</span>. <br />
          It is a <span style="font-weight: bold;">hybrid</span> algorithm.
          With small number of threads, it is a subdivision algorithm, but with
          many threads is a merging algorithms, which need a small  auxiliary
          memory ( block_size * number of threads).<br />
          <br />
          The block_size is an internal parameter of the algorithm, which  in
          order to achieve the highest speed, change according the size of the
          objects to sort according the next table. The strings use a block_size
          of 128.<br />
          <br />
        </div>
        <table cellspacing="0" border="1" style="width: 803px; height: 84px; margin-left: 80px;">
          <tbody>
            <tr>
              <td style="width: 104.95px;">object size (bytes)</td>
              <td style="width: 62px; background-color: white; text-align: center;">1
                - 15<br />
              </td>
              <td style="width: 62px; background-color: white; text-align: center;">16
                - 31<br />
              </td>
              <td style="width: 62px; background-color: white; text-align: center;">32
                - 63<br />
              </td>
              <td style="width: 62px; background-color: white; text-align: center;">64
                - 127<br />
              </td>
              <td style="width: 62px; background-color: white; text-align: center;">128
                - 255<br />
              </td>
              <td style="width: 62px; background-color: white; text-align: center;">256
                - 511<br />
              </td>
              <td style="width: 62px; background-color: white; text-align: left;">512
                - <br />
              </td>
            </tr>
            <tr>
              <td>block_size <br />
              </td>
              <td style="width: 62px; background-color: white; text-align: center;">4096<br />
              </td>
              <td style="width: 62px; background-color: white; text-align: center;">2048<br />
              </td>
              <td style="width: 62px; background-color: white; text-align: center;">1024<br />
              </td>
              <td style="width: 62px; background-color: white; text-align: center;">768<br />
              </td>
              <td style="width: 62px; background-color: white; text-align: center;">512<br />
              </td>
              <td style="width: 62px; background-color: white; text-align: center;">256<br />
              </td>
              <td style="width: 62px; background-color: white; text-align: center;">128<br />
              </td>
            </tr>
          </tbody>
        </table>
        <div style="margin-left: 80px;"> <br />
          This algorithm eliminates the duality. You compile your program using
          the new algorithms. When your program runs on a machine with a small
          number of threads the algorithm internally uses a subdivision
          algorithm and  has similar performance to  TBB, and when run on a
          machine with many threads, internally uses the new algorithm and has
          the performance of GCC Parallel Sort, with the<span style="font-weight: bold;">
            additional advantage</span> of <span style="font-weight: bold;">reduced
            memory consumption.</span><br />
          <br />
          The algorithm uses an <strong style="font-weight: bold;">auxiliary
            memory of block_size elements</strong> for each thread. The <span style="font-weight: bold;">worst
            case</span> for the algorithm is when there are <span style="font-weight: bold;">very
            big elements</span> and <span style="font-weight: bold;">many
            threads</span>. With big elements (512 bytes), and 12 threads, The
          memory measured was: </div>
        <p style="margin-left: 80px;">  </p>
        <table style="width: 558px; height: 122px; margin-left: 80px;">
          <thead>
            <tr>
              <th><span style="font-weight: bold;">Algorithm</span></th>
              <th><span style="font-weight: bold;">Memory used in MB</span></th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td style="width: 307.45px;">GCC Parallel Sort (OpenMP)</td>
              <td style="width: 244.55px;">1565 MB</td>
            </tr>
            <tr>
              <td>Threading Building Blocks (TBB)</td>
              <td>783 MB</td>
            </tr>
            <tr>
              <td>Block Indirect Sort</td>
              <td>812 MB</td>
            </tr>
          </tbody>
        </table>
        <div style="margin-left: 80px;"> <br />
          <em>This <strong style="font-weight: bold;">new parallel_sort
              algorithm had been created and implemented specifically for this
              library</strong> by the author.</em><br />
          <em>If you are interested in a <span style="font-weight: bold;">brief
              description</span> of the algorithm, you can find in the next link</em>
          <a data-original-href="../block_indirect_sort_brief_en.pdf" target="_blank"
            href="block_indirect_sort_brief_en.pdf"> Block Indirect Sort Brief </a>
          <br />
          <em>If you are interested in a <span style="font-weight: bold;">detailed
              description</span> of the algorithm, you can find in the next link</em>
          <a data-original-href="../block_indirect_sort_en.pdf" href="block_indirect_sort_en.pdf"
            target="_blank"> Block Indirect Sort </a><br />
          <span style="font-style: italic;"></span><a href="https://github.com/fjtapia/sort_parallel_benchmark"
            target="_blank"></a> </div>
        <p><br />
        </p>
        <p><br />
          <span style="font-size: 18pt;font-weight: bold; color: black;"></span></p>
        <a name="thread"></a> <span style="font-size: 18pt;font-weight: bold; color: black;">4.2.-
          THREAD SPECIFICATION IN THE PARALLEL ALGORITHMS</span>
        <p><font face="Arimo, sans-serif"> </font></p>
        <p style="margin-left: 80px;"><font face="Arimo, sans-serif"><br />
          </font></p>
        <p style="margin-left: 80px;"><font face="Arimo, sans-serif">The
            parallel algorithms have a parameter indicating the number of thread
            to use in the sorting process, which always is the last value in the
            call. The default value (if left unspecified) is the number of HW
            threads of the machine where the program is running.</font></p>
        <p style="margin-left: 80px;"><font face="Arimo, sans-serif"> </font></p>
        <p style="margin-left: 80px;"><font face="Arimo, sans-serif"> </font> </p>
        <p style="margin-bottom: 0cm; line-height: 100%; margin-left: 80px;"><span
            style="font-family: Arimo,sans-serif;">The parallel algorithms have
            4 invocation formats:</span></p>
        <p style="margin-bottom: 0cm; line-height: 100%; margin-left: 80px;"><br />
          <span style="font-family: Arimo,sans-serif;"></span></p>
        <ul style="margin-left: 120px;">
          <li><span style="font-family: Arimo,sans-serif;">algorithm ( first
              iterator, last iterator, comparison object, number of threads )</span></li>
          <li><span style="font-family: Arimo,sans-serif;">algorithm ( first
              iterator, last iterator, comparison object )</span><br />
            <span style="font-family: Arimo,sans-serif;"></span></li>
          <li><span style="font-family: Arimo,sans-serif;">algorithm ( first
              iterator, last iterator, number of threads )</span><br />
            <span style="font-family: Arimo,sans-serif;"></span></li>
          <li><span style="font-family: Arimo,sans-serif;"></span><span style="font-family: Arimo,sans-serif;">algorithm
              ( first iterator, last iterator )</span></li>
        </ul>
        <p style="margin-bottom: 0cm; line-height: 100%; margin-left: 80px;"><span
            style="font-style: italic;"> </span></p>
        <p style="margin-bottom: 0cm; line-height: 100%; margin-left: 80px;"><span
            style="font-style: italic;"><br />
          </span></p>
        <p style="margin-bottom: 0cm; line-height: 100%; margin-left: 80px;"><span
            style="font-style: italic;">If no comparison object is specified,
            the default class ( std::less&lt;value_t&gt; ) is used.</span></p>
        <p style="margin-bottom: 0cm; line-height: 100%; margin-left: 80px;"><span
            style="font-style: italic;"> </span></p>
        <p style="margin-bottom: 0cm; line-height: 100%; margin-left: 80px;"><span
            style="font-style: italic;">If the number of threads is unspecified,
            the number of HW threads on the machine where the the program is
            running is used </span> </p>
        <span style="font-style: italic;"></span><br />
        <p style="margin-left: 80px;">This example uses parallel_sort and
          sample_sort.</p>
        <p style="margin-left: 80px;"><br />
          <span style="font-size: 16pt;font-weight: bold; color: black;"></span></p>
        <div style="margin-left: 80px;" class="caja_codigo">
          <pre><code><span style="font: 9pt Monospace;"><span class="style9"><br />#include &lt;iostream&gt;
#include &lt;vector&gt;
</span></span></code><code><span style="font: 9pt Monospace;"><span class="style9"><code><span
style="font: 9pt Monospace;"><span class="style9">#include &lt;random&gt;</span></span></code>
#include &lt;boost/sort/parallel/sort.hpp&gt;
</span><span class="style5">namespace </span><span class="style11">bsp </span><span
class="style10">= </span><span class="style16">boost</span><span class="style10">::</span><span
class="style16">sort</span><span class="style10">::</span><span class="style11">parallel</span><span
class="style10">;

</span><span class="style5">int </span><span class="style11">main</span><span class="style10">( </span><span
class="style5">void </span><span class="style10">)
{   </span><span class="style2">//-------------- begin------------
    </span><span class="style16">std</span><span class="style10">::</span><span
class="style16">mt19937_64 </span><span class="style11">my_rand</span><span class="style10">(</span><span
class="style4">0</span><span class="style10">);
    </span><span class="style5">const uint32_t </span><span class="style11">NMAX </span><span
class="style10">= </span><span class="style4">1000000</span><span class="style10">;    </span><span
class="style16">std</span><span class="style10">::</span><span class="style16">vector </span><span
class="style10">&lt;</span><span class="style5">uint64_t</span><span class="style10">&gt; </span><span
class="style11">A</span><span class="style10">, </span><span class="style11">B</span><span
class="style10">;
    </span><span class="style5"><br />    for </span><span class="style10">(</span><span
class="style5">uint32_t </span><span class="style11">i </span><span class="style10">=</span><span
class="style4"> 0</span><span class="style10">; </span><span class="style11">i </span><span
class="style10">&lt; </span><span class="style11">NMAX</span><span class="style10">; ++</span><span
class="style11">i</span><span class="style10">) </span><span class="style11">A</span><span
class="style10">.</span><span class="style16">push_back</span><span class="style10"> (</span><span
class="style11">my_rand</span><span class="style10">());
    </span><span class="style11">B </span><span class="style10">= </span><span class="style11">A </span><span
class="style10">;
    </span><span class="style2">//------------------------------------------------------------------------
    // if the thread parameter is not specified, the number of thread used
    // is the number of HW threads of the machine where the program is running.
    // This number is calculate in each execution of the code
    //------------------------------------------------------------------------
    </span><span class="style11">bsp</span><span class="style10">::</span><span
class="style11">parallel_sort </span><span class="style10">(</span><span class="style11">A</span><span
class="style10">.</span><span class="style16">begin</span><span class="style10">(), </span><span
class="style11">A</span><span class="style10">.</span><span class="style16">end</span><span
class="style10">());
    </span><span class="style11">bsp</span><span class="style10">::</span><span
class="style11">sample_sort </span><span class="style10">(</span><span class="style11">B</span><span
class="style10">.</span><span class="style16">begin</span><span class="style10">(), </span><span
class="style11">B</span><span class="style10">.</span><span class="style16">end</span><span
class="style10">());

    </span><span class="style5">for </span><span class="style10">(</span><span class="style5">uint32_t </span><span
class="style11">i </span><span class="style10">= </span><span class="style4">0</span><span
class="style10">; </span><span class="style11">i </span><span class="style10">&lt; </span><span
class="style11">NMAX</span><span class="style10">; ++</span><span class="style11">i</span><span
class="style10">)
        </span><span class="style5">if </span><span class="style10">(</span><span
class="style11">A</span><span class="style10">[</span><span class="style11">i</span><span
class="style10">] != </span><span class="style11">B</span><span class="style10">[</span><span
class="style11">i</span><span class="style10">]) </span><span class="style16">std</span><span
class="style10">::</span><span class="style16">cout</span><span class="style10">&lt;&lt;</span><span
class="style6">"Error in the sorting process\n"</span><span class="style10">;
    </span><span class="style5">return </span><span class="style4">0 </span><span
class="style10">;
};</span></span> </code></pre>
          <span class="style9"> </span> </div><p style="margin-left: 80px;"><br /></p><p
style="margin-left: 80px;">This example uses parallel_sort and sample_sort and specifies the thread count.</p><p
style="margin-left: 80px;"><br />
          <span style="font-size: 16pt;font-weight: bold; color: black;"></span></p><div
style="margin-left: 80px;" class="caja_codigo">
          <pre><code><span style="font: 9pt Monospace;"><span class="style9"><br />#include &lt;iostream&gt;
#include &lt;vector&gt;
</span></span></code><code><span style="font: 9pt Monospace;"><span class="style9"><code><span
style="font: 9pt Monospace;"><span class="style9">#include &lt;random&gt;</span></span></code>
#include &lt;boost/sort/parallel/sort.hpp&gt;
</span><span class="style5">namespace </span><span class="style11">bsp </span><span
class="style10">= </span><span class="style16">boost</span><span class="style10">::</span><span
class="style16">sort</span><span class="style10">::</span><span class="style11">parallel</span><span
class="style10">;</span><span class="style5">int </span><span class="style11">main</span><span
class="style10"> (</span><span class="style5">void</span><span class="style10">)
{   </span><span class="style2">//-------------- begin------------
    </span><span class="style16">std</span><span class="style10">::</span><span
class="style16">mt19937_64 </span><span class="style11">my_rand</span><span class="style10">(</span><span
class="style4">0</span><span class="style10">);
    </span><span class="style5">const uint32_t </span><span class="style11">NMAX </span><span
class="style10">= </span><span class="style4">1000000</span><span class="style10">;
    </span><span class="style16">uint32_t number_threads = std::thread::hardware_concurrency();<br />    std</span><span
class="style10">::</span><span class="style16">vector </span><span class="style10">&lt;</span><span
class="style5">uint64_t</span><span class="style10">&gt; </span><span class="style11">A</span><span
class="style10">, </span><span class="style11">B </span><span class="style10">;
    </span><span class="style5">for </span><span class="style10">(</span><span class="style5">uint32_t </span><span
class="style11">i </span><span class="style10">= </span><span class="style4">0</span><span
class="style10">; </span><span class="style11">i </span><span class="style10">&lt; </span><span
class="style11">NMAX</span><span class="style10">; ++</span><span class="style11">i</span><span
class="style10">)  </span><span class="style11">A</span><span class="style10">.</span><span
class="style16">push_back </span><span class="style10">(</span><span class="style11">my_rand</span><span
class="style10">());
    </span><span class="style11">B </span><span class="style10">= </span><span class="style11">A </span><span
class="style10">;
    </span><span class="style2">//------------------------------------------------------------------------
    // If the result of number_threads / 6 is smaller than 1, internally use 1 thread
    //------------------------------------------------------------------------
    </span><span class="style11">bsp</span><span class="style10">::</span><span
class="style11">parallel_sort </span><span class="style10">(</span><span class="style11">A</span><span
class="style10">.</span><span class="style16">begin</span><span class="style10">(), </span><span
class="style11">A</span><span class="style10">.</span><span class="style16">end</span><span
class="style10">(), </span><span class="style11">number_threads / 6</span><span
class="style10">);
    </span><span class="style2">//------------------------------------------------------------------------
    //  force to execute with 100 threads
    //------------------------------------------------------------------------
    </span><span class="style11">bsp</span><span class="style10">::</span><span
class="style11">sample_sort </span><span class="style10">(</span><span class="style11">B</span><span
class="style10">.</span><span class="style16">begin</span><span class="style10">(), </span><span
class="style11">B</span><span class="style10">.</span><span class="style16">end</span><span
class="style10">(),</span><span class="style10"></span><span class="style4"> 100</span><span
class="style10">);

    </span><span class="style5">for </span><span class="style10">(</span><span class="style5">uint32_t </span><span
class="style11">i </span><span class="style10">= </span><span class="style4">0</span><span
class="style10">; </span><span class="style11">i </span><span class="style10">&lt; </span><span
class="style11">NMAX </span><span class="style10">; ++</span><span class="style11">i</span><span
class="style10">)
        </span><span class="style5">if </span><span class="style10">(</span><span
class="style11">A</span><span class="style10">[</span><span class="style11">i</span><span
class="style10">] != </span><span class="style11">B</span><span class="style10">[</span><span
class="style11">i</span><span class="style10">])  </span><span class="style16">std</span><span
class="style10">::</span><span class="style16">cout</span><span class="style10">&lt;&lt;</span><span
class="style6">"Error in the sorting process\n"</span><span class="style10">;
    </span><span class="style5">return </span><span class="style4">0 </span><span
class="style10">;
};</span></span> </code></pre>
          <span class="style9"> </span> </div>
        <br /><br />
        <p><a name="algorithms"></a> <span style="font-size: 18pt;font-weight: bold; color: black;">4.3.-
            ALGORITHMS</span></p>
        <br />

        <p>  <a name="block"></a> <span style="font-size: 18pt;font-weight: bold; color: black;">4.3.1- block_indirect_sort</span><span
style="font-size: 18pt;font-weight: bold; color: black;"> </span>
        </p><br /><div style="margin-left: 80px;">It's a hybrid algorithm,
        because with a small number of HW threads it uses a parallel version of
        introsort, and with a number of threads &gt; 5 uses the new algorithm. 
        When the number of threads is 1, it uses pdqsort.<br />
        <br />
        This algorithm combines the speed of GCC Parallel Sort with many cores,
        with the small memory consumption of Threading Building Blocks (TBB).
        This algorithm had been created and implemented by the author for this
        library.  The auxiliary memory needed is ( block_size * num of
        threads.) <br />(See description in <a href="#new_par">4.1.2.- New Parallel Sort Algorithm</a> )</div>
           <br />
        <table cellspacing="0" border="1" style="width: 855px; height: 86px; margin-left: 80px;">
          <tbody>
            <tr>
              <td style="width: 126.067px;"><span style="font-style: italic;"><span
style="font-weight: bold;">Algorithm</span></span></td>

              <td style="width: 79.9px;"><span style="font-style: italic;"><span
style="font-weight: bold;"> Stable</span></span></td>
              <td style="width: 226.05px;"><span style="font-style: italic;"><span
style="font-weight: bold;">Additional memory</span></span></td>
              <td style="width: 329.983px; height: 50px;"><span style="font-style: italic;"><span
style="font-weight: bold;">Best, average,and worst case</span></span></td>
            </tr>
            <tr>
              <td><span style="font-family: monospace;"><span style="font-family: Helvetica,sans-serif,Garuda;">block_indirect_sort</span></span><br />
              </td>

              <td>No</td>
              <td>block_size * num. threads</td>
              <td>  N Log N , N Log N , N Log N </td>
            </tr>
          </tbody>
         </table>
        <br />
        <br />

                  <div style="margin-left: 80px;" class="caja_codigo">
          <pre><br /><code><span style="font: 9pt Monospace;"><span class="style5">template </span><span
class="style10">&lt;</span><span class="style5">class </span><span class="style11">iter_t</span><span
class="style11"></span><span class="style10">&gt;</span></span></code><code><span
style="font: 9pt Monospace;"><span class="style5"><br />void </span><span class="style11">parallel_sort </span><span
class="style10">(</span><span class="style11">iter_t first</span><span class="style10">, </span><span
class="style11">iter_t last</span><span class="style10">)</span><span class="style10">;</span></span></code>
<br /><code><span style="font: 9pt Monospace;"><span class="style5">template </span><span
class="style10">&lt;</span><span class="style5">class </span><span class="style11">iter_t</span><span
class="style10">, </span><span class="style5">typename </span><span class="style11">compare</span><span
class="style10">&gt;<br /></span></span></code><code><span style="font: 9pt Monospace;"><span
class="style5">void </span><span class="style11">parallel_sort </span><span class="style10">(</span><span
class="style11">iter_t first</span><span class="style10">, </span><span class="style11">iter_t last</span><span
class="style10">, </span><span class="style11">compare comp</span><span class="style10"></span><span
class="style10">)</span><span class="style10">;</span></span></code><code><span
style="font: 9pt Monospace;"><span class="style5"><br /><br />template </span><span
class="style10">&lt;</span><span class="style5">class </span><span class="style11">iter_t</span><span
class="style11"></span><span class="style10">&gt;</span></span></code><br /><code><span
style="font: 9pt Monospace;"><span class="style5">void </span><span class="style11">parallel_sort </span><span
class="style10">(</span><span class="style11">iter_t first</span><span class="style10">, </span><span
class="style11">iter_t last</span><span class="style10">, </span><span class="style11"></span><span
class="style10"></span><span class="style5">uint32_t </span><span class="style11">num_thread</span><span
class="style10">)</span><span class="style10">;</span></span></code><code><span
style="font: 9pt Monospace;"><span class="style10"><code><span style="font: 9pt Monospace;"><span
class="style5"><br /><br />template </span><span class="style10">&lt;</span><span
class="style5">class </span><span class="style11">iter_t</span><span class="style10">, </span><span
class="style5">typename </span><span class="style11">compare</span><span class="style10">&gt;</span></span></code>
</span><span class="style5">void </span><span class="style11">parallel_sort </span><span
class="style10">(</span><span class="style11">iter_t first</span><span class="style10">, </span><span
class="style11">iter_t last</span><span class="style10">, </span><span class="style11">compare comp</span><span
class="style10">, </span></span></code><code><span style="font: 9pt Monospace;"><span
class="style10"><code><span style="font: 9pt Monospace;"><span class="style10"></span><span
class="style11"></span><span class="style10"></span><span class="style5">uint32_t </span><span
class="style11">num_thread</span><span class="style10">)</span><span class="style10">;</span></span></code></span></span></code><br /> <code><span
style="font: 9pt Monospace;"><span class="style5"></span><span class="style10"></span></span></code></pre>
          <span class="style9"> </span> </div><br /> 
                  <a name="sample"></a> <span style="font-size: 18pt;font-weight: bold; color: black;">4.3.2- sample_sort</span>
                  <br /><br /><div style="margin-left: 80px;">This is a parallel stable sort algorithm. It is faster than
        parallel_stable_sort but the auxiliary memory used is N elements. <br />
        You can see the details in the benchmark chapter<br /><br />

        </div><table cellspacing="0" border="1" style="width: 855px; height: 86px; margin-left: 80px;">
          <tbody>
            <tr>
              <td style="width: 170.717px;"><span style="font-style: italic;"><span
style="font-weight: bold;">Algorithm</span></span></td>
              <td style="width: 80.167px;"><span style="font-style: italic;"><span
style="font-weight: bold;">Parallel</span></span></td>
              <td style="width: 96.7px;"><span style="font-style: italic;"><span
style="font-weight: bold;"> Stable</span></span></td>
              <td style="width: 174.667px;"><span style="font-style: italic;"><span
style="font-weight: bold;">Additional memory</span></span></td>
              <td style="width: 329.983px; height: 50px;"><span style="font-style: italic;"><span
style="font-weight: bold;">Best, average,and worst case</span></span></td>
            </tr>
            <tr>
              <td>sample_sort </td>
              <td><span style="font-weight: bold;"><span style="font-family: monospace;"><span
style="font-family: Helvetica,sans-serif,Garuda;">Yes</span></span></span><br />
              </td>
              <td>Yes<br />
              </td>
              <td>  N<br />
              </td>
              <td>  N Log N , N Log N , N Log N </td>
            </tr>
          </tbody>
        </table><div style="margin-left: 80px;">
        </div><p style="margin-bottom: 0cm; line-height: 100%; margin-left: 80px;"><font
face="Arimo, sans-serif">
          </font></p><div style="margin-left: 80px;">
        <br />
        </div><div style="margin-left: 80px;" class="caja_codigo"> <br />
          <code><span style="font: 9pt Monospace;"><span class="style5"></span></span></code>
          <pre><code><span style="font: 9pt Monospace;"><span class="style5">template </span><span
class="style10">&lt;</span><span class="style5">class </span><span class="style11">iter_t</span><span
class="style11"></span><span class="style10">&gt;</span></span></code><code><span
style="font: 9pt Monospace;"><span class="style5"><br />void </span></span></code><code><span
style="font: 9pt Monospace;"><span class="style5"></span><span class="style11">sample_sort</span></span></code><code><span
style="font: 9pt Monospace;"><span class="style11"> </span><span class="style10">(</span><span
class="style11">iter_t first</span><span class="style10">, </span><span class="style11">iter_t last</span><span
class="style10">)</span><span class="style10">;</span></span></code>
<br /><code><span style="font: 9pt Monospace;"><span class="style5">template </span><span
class="style10">&lt;</span><span class="style5">class </span><span class="style11">iter_t</span><span
class="style10">,  </span><span class="style5">typename </span><span class="style11">compare</span><span
class="style10">&gt;</span></span></code><code><span style="font: 9pt Monospace;"><span
class="style5"><br />void </span></span></code><code><span style="font: 9pt Monospace;"><span
class="style5"></span><span class="style11">sample_sort</span></span></code><code><span
style="font: 9pt Monospace;"><span class="style5"><code><span style="font: 9pt Monospace;"><span
class="style11"></span></span></code></span><span class="style11"> </span><span
class="style10">(</span><span class="style11">iter_t first</span><span class="style10">, </span><span
class="style11">iter_t last</span><span class="style10">, </span><span class="style11">compare comp</span><span
class="style10"></span><span class="style10">)</span><span class="style10">;</span></span></code><code><span
style="font: 9pt Monospace;"><span class="style5"><br /><br />template </span><span
class="style10">&lt;</span><span class="style5">class </span><span class="style11">iter_t</span><span
class="style11"></span><span class="style10">&gt;</span></span></code><br /><code><span
style="font: 9pt Monospace;"><span class="style5">void </span></span></code><code><span
style="font: 9pt Monospace;"><span class="style5"></span><span class="style11">sample_sort</span></span></code><code><span
style="font: 9pt Monospace;"><span class="style11"> </span><span class="style10">(</span><span
class="style11">iter_t first</span><span class="style10">, </span><span class="style11">iter_t last</span><span
class="style10">, </span><span class="style11"></span><span class="style10"></span><span
class="style5">uint32_t </span><span class="style11">num_thread</span><span class="style10">)</span><span
class="style10">;</span></span></code><code><span style="font: 9pt Monospace;"><span
class="style10"><code><span style="font: 9pt Monospace;"><span class="style5"><br /><br />template </span><span
class="style10">&lt;</span><span class="style5">class </span><span class="style11">iter_t</span><span
class="style10">,  </span><span class="style5">typename </span><span class="style11">compare</span><span
class="style10">&gt;</span></span></code>
</span><span class="style5">void </span></span></code><code><span style="font: 9pt Monospace;"><span
class="style5"></span><span class="style11">sample_sort</span></span></code><code><span
style="font: 9pt Monospace;"><span class="style11"> </span><span class="style10">(</span><span
class="style11">iter_t first</span><span class="style10">, </span><span class="style11">iter_t last</span><span
class="style10">, </span><span class="style11">compare comp</span><span class="style10">, </span></span></code><code><span
style="font: 9pt Monospace;"><span class="style10"><code><span style="font: 9pt Monospace;"><span
class="style10"></span><span class="style11"></span><span class="style10"></span><span
class="style5">uint32_t </span><span class="style11">num_thread</span><span class="style10">)</span><span
class="style10">;<br /><br /></span></span></code></span></span></code></pre>
          <span class="style9"> </span> </div><div style="margin-left: 80px;">
        </div><br />

        <p><a name="stable"></a> <span style="font-size: 18pt;font-weight: bold; color: black;">4.3.3.-
            parallel_stable_sort</span></p>
        <p> </p><div style="margin-left: 80px;">
        This is a parallel stable sort algorithm, built on top of the sample sort
        algorithm , bust using less auxiliary memory (N / 2 elements) in
        exchange for slowing it down about 10%.

        </div><p style="margin-left: 80px;">  </p><div style="margin-left: 80px;">

        </div><table cellspacing="0" border="1" style="width: 855px; height: 86px; margin-left: 80px;">
          <tbody>
            <tr>
              <td style="width: 168px;"><span style="font-style: italic;"><span
style="font-weight: bold;">Algorithm</span></span></td>

              <td style="width: 96.7px;"><span style="font-style: italic;"><span
style="font-weight: bold;"> Stable</span></span></td>
              <td style="width: 174.667px;"><span style="font-style: italic;"><span
style="font-weight: bold;">Additional memory</span></span></td>
              <td style="width: 329.983px; height: 50px;"><span style="font-style: italic;"><span
style="font-weight: bold;">Best, average,and worst case</span></span></td>
            </tr>
            <tr>
              <td>parallel_stable_sort </td>

              <td>Yes<br />
              </td>
              <td> N / 2 <br />
              </td>
              <td>  N Log N , N Log N , N Log N </td>
            </tr>
          </tbody>
        </table><div style="margin-left: 80px;">
        </div><p style="margin-bottom: 0cm; line-height: 100%; margin-left: 80px;"><font
face="Arimo, sans-serif">
          </font></p><div style="margin-left: 80px;">
        </div><p style="margin-left: 80px;"> 
        </p><div style="margin-left: 80px;">
        </div><div style="margin-left: 80px;" class="caja_codigo"> <br />
          <pre><code><span style="font: 9pt Monospace;"><span class="style5"></span><span
class="style10"></span><span class="style5"></span><span class="style11"></span><span
class="style10"></span><span class="style5"></span><span class="style11"></span><span
class="style10"></span><span class="style11"></span><span class="style10"></span><span
class="style11"></span><span class="style10"></span><span class="style5"></span><span
class="style11"></span><span class="style10"></span><span class="style11"></span><span
class="style10"></span><span class="style11"></span><span class="style10"></span><span
class="style10"></span></span></code></pre>
          <pre><code><span style="font: 9pt Monospace;"><span class="style5">template </span><span
class="style10">&lt;</span><span class="style5">class </span><span class="style11">iter_t</span><span
class="style11"></span><span class="style10">&gt;</span></span></code><code><span
style="font: 9pt Monospace;"><span class="style5"><br />void </span></span></code><code><span
style="font: 9pt Monospace;"><span class="style5"><code><span style="font: 9pt Monospace;"><span
class="style11">parallel_stable_sort</span></span></code></span><span class="style11"> </span><span
class="style10">(</span><span class="style11">iter_t first</span><span class="style10">, </span><span
class="style11">iter_t last</span><span class="style10">)</span><span class="style10">;</span></span></code>
<br /><code><span style="font: 9pt Monospace;"><span class="style5">template </span><span
class="style10">&lt;</span><span class="style5">class </span><span class="style11">iter_t</span><span
class="style10">, </span><span class="style5">typename </span><span class="style11">compare</span><span
class="style10">&gt;</span></span></code><code><span style="font: 9pt Monospace;"><span
class="style5"><br />void </span></span></code><code><span style="font: 9pt Monospace;"><span
class="style5"><code><span style="font: 9pt Monospace;"><span class="style11">parallel_stable_sort</span></span></code></span><span
class="style11"> </span><span class="style10">(</span><span class="style11">iter_t first</span><span
class="style10">, </span><span class="style11">iter_t last</span><span class="style10">, </span><span
class="style11">compare comp</span><span class="style10">)</span><span class="style10">;</span></span></code><code><span
style="font: 9pt Monospace;"><span class="style5"><br /><br />template </span><span
class="style10">&lt;</span><span class="style5">class </span><span class="style11">iter_t</span><span
class="style11"></span><span class="style10">&gt;</span></span></code><br /><code><span
style="font: 9pt Monospace;"><span class="style5">void </span></span></code><code><span
style="font: 9pt Monospace;"><span class="style5"><code><span style="font: 9pt Monospace;"><span
class="style11">parallel_stable_sort</span></span></code></span><span class="style11"> </span><span
class="style10">(</span><span class="style11">iter_t first</span><span class="style10">, </span><span
class="style11">iter_t last</span><span class="style10">, </span><span class="style11"></span><span
class="style10"></span><span class="style5">uint32_t </span><span class="style11">num_thread</span><span
class="style10">)</span><span class="style10">;</span></span></code><code><span
style="font: 9pt Monospace;"><span class="style10"><code><span style="font: 9pt Monospace;"><span
class="style5"><br /><br />template </span><span class="style10">&lt;</span><span
class="style5">class </span><span class="style11">iter_t</span><span class="style10">, </span><span
class="style5">typename </span><span class="style11">compare</span><span class="style10">&gt;</span></span></code>
</span><span class="style5">void </span></span></code><code><span style="font: 9pt Monospace;"><span
class="style5"><code><span style="font: 9pt Monospace;"><span class="style11">parallel_stable_sort</span></span></code></span><span
class="style11"> </span><span class="style10">(</span><span class="style11">iter_t first</span><span
class="style10">, </span><span class="style11">iter_t last</span><span class="style10">, </span><span
class="style11">compare comp</span><span class="style10">, </span></span></code><code><span
style="font: 9pt Monospace;"><span class="style10"><code><span style="font: 9pt Monospace;"><span
class="style10"></span><span class="style11"></span><span class="style10"></span><span
class="style5">uint32_t </span><span class="style11">num_thread</span><span class="style10">)</span><span
class="style10">;</span></span></code></span></span></code></pre>
          <br />
          <br />
          <span class="style9"> </span> </div><div style="margin-left: 80px;">
        </div>

        <br /><br />  <br />
<a name="par_benchmarks"></a> <span style="font-size: 24pt;font-weight: bold; color: black;">5.-  PARALLEL</span><span
style="font-size: 24pt;font-weight: bold; color: black;"> BENCHMARKS</span><br /><br /><a
name="par_gcc"></a> <span style="font-size: 18pt;font-weight: bold; color: black;">5.1.- LINUX x64 GCC 6.3  </span><br /><br />
<div style="margin-left: 80px;">In the library you can find benchmarks programs for to measure the speed of the algorithms in your machine and operating system.<br /><br />There
 are 3 types of benchmarks, with 64 bits integers, with strings and with
 objects of several sizes. The objects are arrays of integers. With the
heavy comparison sum all the elements in each, in the light comparison
use only the first number of the array.<br /><br />The computer used is a Intel(R) Core(TM) i7-5820K CPU @ 3.30GHz, with 6 cores and 2 threads by core, and 15M of cache<br /><br />The results obtained with GCC 6.3 on Linux, in the benchmark_only_Boost with integers are:
  <br /><br /><br />
  <div class="caja_codigo"> <br /><code><span style="color: black;">
               100 000 000 NUMBERS OF 64 BITS
          <br />            RANDOMLY FILLED<br />
          <br />                         |  Time   |   Maximum   |
          <br />                         |  secs   | Memory Used |
          <br />-------------------------+---------+-------------+
          <br />OMP parallel sort        | 1.1990  |   1564 MB   |
          <br />TBB parallel_sort        | 1.6411  |    789 MB   |
          <br />block_indirect_sort      | 0.9270  |    790 MB   |
          <br />                         |         |             |
          <br />OMP parallel stable sort | 1.5814  |   1972 MB   |
          <br />TBB parallel stable sort | 1.1745  |   1570 MB   |
          <br />sample sort              | 1.2872  |   1566 MB   |
          <br />parallel stable sort     | 1.7158  |   1176 MB   |
          <br />-------------------------+---------+-------------+<br />
                             </span></code> </div>

      <br />
<br /><div class="caja_codigo"> <code>


<br />
       10 000 000   S T R I N G S
<br />            RANDOMLY FILLED
<br />
<br />                         |  Time   |   Maximum   |
<br />                         |  secs   | Memory Used |
<br />-------------------------+---------+-------------+
<br />OMP parallel sort        | 1.5738  |   2023 MB   |
<br />TBB parallel_sort        | 1.8626  |    826 MB   |
<br />block_indirect_sort      | 1.2411  |    825 MB   |
<br />                         |         |             |
<br />OMP parallel stable sort | 2.3214  |   2024 MB   |
<br />TBB parallel stable sort | 1.4383  |   1143 MB   |
<br />sample sort              | 1.5097  |   1135 MB   |
<br />parallel stable sort     | 2.0970  |    978 MB   |
<br />-------------------------+---------+-------------+
<br />
<br />
</code>
</div>

      <br />
<br /><div class="caja_codigo"> <code><span style="font: 9pt Monospace;">
  </span>=============================================================<br />
  =            OBJECT COMPARISON                              =<br />
  =          ---------------------                            =<br />
  =                                                           =<br />
  = The objects are arrays of 64 bits numbers                 =<br />
  =                                                           =<br />
  = They are compared in two ways :                           =<br />
  =                                                           =<br />
  = (H) Heavy : The comparison is the sum of all the numbers  =<br />
  =             of the array. In each comparison, sum all     =<br />
  =             the numbers of the array                      =<br />
  =                                                           =<br />
  = (L) Light : The comparison is with the first element of   =<br />
  =             the array, as a key                           =<br />
  =                                                           =<br />
  =============================================================<br />
  <br />                    | 100000000 |  50000000 |  25000000 |  12500000 |   6250000 |   1562500 |<br />                   
  | objects of| objects of|objects of |objects of |objects of |objects of |<br />                   
  |  8 bytes  | 16 bytes  | 32 bytes  | 64 bytes  | 128 bytes | 512 bytes |<br />                   
  |           |           |           |           |           |           |<br />                   
  |  H     L  |  H     L  |  H     L  |  H     L  |  H     L  |  H     L  |<br />
  --------------------+-----------+-----------+-----------+-----------+-----------+-----------+<br />
  OMP parallel sort   | 1.18  1.17| 0.73  0.66| 0.51  0.45| 0.43  0.39| 0.41  0.37| 0.37  0.32|<br />
  TBB parallel_sort   | 1.71  1.59| 0.85  0.81| 0.56  0.54| 0.51  0.42| 0.45  0.39| 0.36  0.32|<br />
  block_indirect_sort | 1.11  1.08| 0.66  0.63| 0.49  0.46| 0.43  0.39| 0.40  0.37| 0.37  0.33|<br />                   
  |           |           |           |           |           |           |<br />
  OMP par stable sort | 1.55  1.55| 1.38  1.35| 1.23  1.22| 1.17  1.17| 1.09  1.08| 0.97  0.97|<br />
  TBB par stable sort | 1.23  1.23| 0.89  0.85| 0.74  0.72| 0.71  0.69| 0.69  0.69| 0.68  0.68|<br />
  sample sort         | 1.32  1.32| 0.84  0.78| 0.66  0.63| 0.63  0.62| 0.62  0.61| 0.60  0.60|<br />
  parallel stable sort| 1.80  1.90| 1.17  1.07| 0.83  0.75| 0.76  0.71| 0.72  0.70| 0.70  0.69|<br />                   
  |           |           |           |           |           |           |<br />
  --------------------+-----------+-----------+-----------+-----------+-----------+-----------+<br />
  <br /><br />                          | Maximum     |<br />                         | Memory Used |<br />
  -------------------------+-------------+<br />
  OMP parallel sort        |   1569 MB   |<br />
  TBB parallel_sort        |    788 MB   |<br />
  block_indirect_sort      |    794 MB   |<br />                        
  |             |<br />
  OMP parallel stable sort |   1980 MB   |<br />
  TBB parallel stable sort |   1573 MB   |<br />
  sample sort              |   1568 MB   |<br />
  parallel stable sort     |   1177 MB   |<br />                        
  |             |<br />
  -------------------------+-------------+<br /><br />
  
  <br />  </code> </div>

<br />
<a style="float:right" href="parallel.html" title="parallel.html"><img src="img/next.png"
alt="link to next page" /></a> 
<a style="float:right" href="index.html" title="index.html"><img src="img/up.png"
alt="go to head of the page" /></a>  
 <a style="float:right" href="index.html" title="index.html"><img src="img/prev.png"
alt="link to index page" /></a>
</div></div>
<table width="100%" xmlns:rev="http://www.cs.rpi.edu/~gregod/boost/tools/doc/revision">
        <tbody>
          <tr>
            <td align="left">
              <p><small>Last revised: Oct 20, 2016</small></p>
            </td>
            <td> <br />
            </td>
          </tr>
        </tbody>
      </table>
      <hr />
      <div id="footer">
        <div id="footer-left">
          <div id="copyright">
            <p>Copyright Francisco Jose Tapia 2016.</p>
          </div>
          <div id="license">
            <p>Distributed under the <a class="internal" href="/LICENSE_1_0.txt">Boost
                Software License, Version 1.0</a>.</p>
          </div>
        </div>
        <div id="footer-right">
          <div id="banners">
            <p id="banner-xhtml"> <a class="external" href="http://validator.w3.org/check?uri=referer">XHTML 1.0</a></p>
            <p id="banner-css"> <a class="external" href="http://jigsaw.w3.org/css-validator/check/referer">CSS</a></p>
            <p id="banner-osi"> <a class="external" href="http://www.opensource.org/docs/definition.php">OSI Certified</a></p>
          </div>
        </div>
      </div>
    </div>
</body></html>